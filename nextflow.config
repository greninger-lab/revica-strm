includeConfig 'conf/base.config'
includeConfig 'conf/modules.config'

params {

	help = false

	// General params                                                                   
	input = null                                                                
	output = 'revica_output'
	run_name = 'run'
	db = "${projectDir}/assets/ref.fa" 
	skip_consensus = false
	save_temp_files = false
	concat_flu = true
  sra_proper_pair = false
  use_mem2 = false

	// FASTP option                                                             
	skip_fastp = false
	skip_fastqc = false
	adapter_trimming = "${projectDir}/assets/adapter.fasta"
	trim_len = 50
	save_trimmed_reads = false
	save_trimmed_fail = false
	save_merged = false
  min_trimmed_reads = 0

	// Kraken2 options
	run_kraken2 = false	
	kraken2_db = ''
	kraken2_variants_host_filter = false
	kraken2_assembly_host_filter = true
	save_kraken2_classified_reads = false
	save_kraken2_unclassified_reads = false

	// Seqtk sample options
	sample = false
	save_sample_reads = false

	// Reference selection criteria
	ref_min_depth = 3
  ref_min_cov = 30

  // Thresholds for alignment to initial consensus
  cons_init_min_depth = 5
  cons_init_min_cov = 60

  ivar_init_t = 0.6
  ivar_init_q = 20
  ivar_init_m = 1

  ivar_fin_t = 0.4
  ivar_fin_q = 20
  ivar_fin_m = 3
		                                                                                   
	// iVar consensus 
	//ivar_consensus_t = 0.4
	//ivar_consensus_q = 20
	//ivar_consensus_m = 3

	// Max resource option
	max_cpus = 32
	max_memory = '64.GB'
	max_time = '32.h'

}

profiles {
	docker {
		docker.enabled = true
		platform = 'linux/amd64'
	}
}

def use_all_available_cores(obj) {
	
	def cur_max = Math.min(obj as int, Runtime.runtime.availableProcessors() as int)
	return Math.min(cur_max, params.max_cpus)
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
       try {
	    return Math.min( obj as int, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
